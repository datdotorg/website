const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const Dialog = require('Dialog')

function actions({styl, title, ver, selector, url, package}, clearVers, protocol) {
    let css = style
    // icons
    let icon_launch = Graphic('./src/node_modules/assets/svg/launch.svg', css.icon)
    let icon_shortcut = Graphic('./src/node_modules/assets/svg/shortcut.svg', css.icon)
    let icon_remove = Graphic('./src/node_modules/assets/svg/remove.svg', css.icon)
    let icon_stop = Graphic('./src/node_modules/assets/svg/forcestop.svg', css.icon)
    let icon_settings = Graphic('./src/node_modules/assets/svg/settings.svg', css.icon)

    // button actions
    let launch = bel`
        <button class="${css.btn} ${css.launch}" 
            onclick=${(e) => actionHandler(e, launch)}>
            ${icon_launch}Launch
        </button>`

    let shortcut = bel`
        <button class="${css.btn} ${css.shortcut}" 
            onclick=${(e) => actionHandler(e, shortcut)}>
            ${icon_shortcut}Shortcut
        </button>`

    let v = bel`<span class=${css.ver}>${ver}</span>`
    let remove = bel`
        <button class="${css.btn} ${css.remove}" 
            onclick=${(e) => actionHandler(e, remove)}>
            ${icon_remove}Remove ${v}
        </button>`

    let stop = bel`
        <button class="${css.btn} ${css.stop}" 
            onclick=${(e) => actionHandler(e, stop)}>
            ${icon_stop}Force stop
        </button>`
    let settings = bel`
        <button  class="${css.btn} ${css.settings}" 
            onclick=${(e) => actionHandler(e, settings)}>
            ${icon_settings}Settings
        </button>`
    
    if (package.title === 'DatDot') {
        shortcut.classList.add(css.active)
        shortcut.classList.add(css.disabled)
        shortcut.setAttribute('disabled', true)
    }
   
    if (package.status.pin) shortcut.classList.add(css.active)
    
    let el = bel`<aside class=${css.actions}>${launch}${shortcut}${settings}${remove}</aside>`

    return el

    // actions
    function actionHandler(event, el) {
        const currentPanel = document.querySelector(`.app_${title}`)
        const currentActions = currentPanel.querySelector(`.${css.actions}`)
        
        if (el.classList[1].includes('launch')) {
            // stop window's event to add css.current
            event.stopPropagation()
            console.log(`${title} v${ver} is running`);
            el.remove(launch)
            currentActions.insertBefore(stop, shortcut)
        }

        if (el.classList[1].includes('stop')) {
            // stop window's event to add css.current
            event.stopPropagation()
            console.log(title, 'is stopped')
            el.remove(stop)
            currentActions.insertBefore(launch, shortcut)
        }

        if (el.classList[1].includes('shortcut')) {
            event.stopPropagation()
            
            // the package is pin on desktop when installed for default, cannot allow to remove.
            if (shortcut.classList.contains(css.disabled)) return
            
            shortcut.classList.toggle(css.active)
            package.status.pin = !package.status.pin

            let appname = package.title.split(' ').join('').toLowerCase()

            if (package.status.pin) {
                console.log(`${title} is pinned to desktop`);
                let applist = document.querySelector("[class^='app-list']")

                // set package url
                let url = `${package.link}/dist/${package.status.app.version}`
                
                // prepare app's icon
                var appicon = bel`<div class=${css.icon}><img src="${url}/${package.status.app.data.icon}"></div>`
                
                // if icon's type is svg, then create svg
                if (package.status.app.data.icon.includes('svg') ) {
                    appicon = Graphic(`${url}/${package.status.app.data.icon}`, css.icon)
                }

                var pinapp = bel`
                <div class="${css['app-icon']} ${appname}">
                    <div class=${css.icon}>${appicon}</div>
                    <span class="${css['app-name']}">${package.title}</span>
                </div>
                `
                applist.append(pinapp)

                return protocol({app: package, appicon: pinapp} )

            } else {
                console.log(`${title} is unpinned from desktop`);
                let target = document.querySelector(`[class*="${appname}"]`)
                target.remove()
            }
            

        }

        if (el.classList[1].includes('settings')) {
            event.stopPropagation()
            console.log(`${title} v${ver} open settings`);
        }

        if (el.classList[1].includes('remove')) {
            // stop window's event to add css.current
            event.stopPropagation()
            console.log(`${title} v${ver} will remove`);
            currentPanel.classList.remove(styl)
            currentPanel.style.zIndex = 9
            document.body.append( Dialog({panel: currentPanel, current: styl, ver, package }, removeHandler) )
        }

        function removeHandler() {
            let info = currentPanel.querySelector('[class^="intro-header"]')
            // stop window's event to add css.current
            event.stopPropagation()
            console.log(`${title} v${ver} is removed`);
            currentPanel.classList.add(styl)
            currentActions.remove()
            info.append(selector)

            let removeApp = {
                title: package.title,
                version: ver
            }
            clearVers( package.versions.latest, removeApp )
        }
        
    }
    
}

const style = csjs`
    .actions {
        grid-area: actions;
        margin-top: 15px;
    }
    .btn {
        display: inline-flex;
        align-items: center;
        outline: none;
        padding: 6px 12px;
        border-radius: 4px;
        font-size: var(--actionBtnFontSize);
        color: var(--btnColor);
        background-color: var(--btnBgColor);
        margin: 5px 5px 0 0;
        border: 1px solid var(--btnBgColor);
        transition: color 0.45s, border-color .45s, background-color 0.45s ease-in-out;
    }
    .btn svg {
        transition: fill 0.45s ease-in-out;
    }
    .btn:hover {
        color: var(--btnHoverColor);
        background-color: var(--btnHoverBgColor);
        border-color: var(--btnHoverBgColor);
    }
    .btn:hover svg {
        fill: white;
    }
    .btn > .icon {
        margin-right: 5px;
        width: 20px;
    }
    .download {

    }
    .launch {

    }
    .shortcut {

    }
    .remove {
        color: var(--actionRemoveColor);
        background-color: var(--actionRemoveBgColor);
        border-color: var(--actionRemoveBgColor);
    }
    .remove:hover {
        background-color: var(--actionRemoveHoverBgColor);
        border-color: var(--actionRemoveBgColor);
    }
    .remove svg {
        fill: var(--actionRemoveColor);
    }
    .update {

    }
    .stop {

    }
    .settings {
        
    }
    .ver {
        font-size: 1.2rem;
        color: black;
        background-color: white;
        padding: 4px 6px;
        margin-left: 5px;
        border-radius: 4px;
    }
    .active, .active:focus, .disabled, .disabled:hover {
        color: #888888;
        background-color: white;
        border: 1px solid #888888;
    }
    .active svg, .active:focus svg, .disabled:hover svg {
        fill: #888888;
    }
    .disabled {
        cursor: not-allowed
    }
    .icon {
        width: 60px;
    }
    .app-icon {
        display: grid;
        grid-template-rows: 60px auto;
        text-align: center;
        justify-items: center;
        cursor: pointer;
        overflow: hidden;
        grid-gap: 7px 0;
        width: 100%;
    }
    .app-name {
        font-size: var(--appNameFontSize);
        color: var(--appNameColor);
        word-break: break-word;
    }`

module.exports = actions