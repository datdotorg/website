const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')
const actions = require('actions')
const SupplyTree = require('SupplyTree')
const packageSidebar = require('packageSidebar')

const mdConvert = require('mdConvert')
const mdTocConvert = require('mdTocConvert')


function AppInfo(styl, url, title, package, protocol) {
    const css = style
    /* if version is installed then show current installed version, 
       otherwise show latest version 
    */
    let vers = package.status.app.version ? package.status.app.version : package.versions.latest
    const path  = `${url}/dist/${vers}`

    // switch image type
    if (package.logo.includes("svg")) {
        var img = Graphic(`${url}/${package.logo}`, css["intro-logo"])
    } else {
        var img = bel`<img class=${css["intro-logo"]} src="${url}/${package.logo}" alt=${package.title} />`
    }

    // icons
    let icon_download = Graphic('./src/node_modules/assets/svg/download.svg', css.icon)
    let icon_arrow_down = Graphic('./src/node_modules/assets/svg/arrow-down.svg', css.down)
    let icon_checked = Graphic('./src/node_modules/assets/svg/checked.svg', css.checked)

    // elements
    const content = bel`<div class=${css.content}></div>`
    const introHeader = bel`<section class=${css["intro-header"]}></section>`
    const markdown = bel`<div class=${css.markdown}></div>`
    const download = bel`<button class="${css.btn} ${css.download}" 
                                onclick=${(e) => installHandler(e)} type="button" value=${vers}>
                                ${icon_download}Download
                        </button>`
    let options = bel`<ul class=${css["show-version"]}></ul>`
    let displayVersion = bel`<span class=${css.text}>${vers}</span>`
    let triggerBtn = bel`<span class=${css.trigger} onclick=${() => selectorHandler(displayVersion)}></span>`
    const selected = bel`
        <div class=${css.selected}>
            ${triggerBtn}
            ${displayVersion}
            ${icon_arrow_down}
        </div>`

    // versions selector
    const selectVersion = bel`
        <div class=${css.selector}>
            ${download}
            ${selected}
            ${options}
        </div>`

    let buttons = actions({styl, title, ver: vers, selector: selectVersion, url, package}, clearVers, protocol)

    selectVersion.children[1].value = package.versions.latest

    // display default page
    const hash = location.hash.slice(1)
    const page = (hash === 'chat') ? 'chat'
      : (hash === 'supplyTree') ? 'supplyTree'
      : (hash === 'doc') ? 'doc'
      : (hash === 'news') ? 'news'
      : (hash === 'package') ? 'package' : 'package'

    pageHandler(page)


    document.body.addEventListener('click', (e) => {
        if (e.target === triggerBtn) {
            options.classList.add(css.on)
            icon_arrow_down.classList.add(css.up)
        } else {
            options.classList.remove(css.on)
            icon_arrow_down.classList.remove(css.up)
        }    
    })

    const el = bel`
        <div class=${css.container}>
            ${packageSidebar({title, container: css.container}, pageHandler)}
            ${content}
        </div>`
    return el

    // get version
    function selectorHandler(el) {
        options.classList.toggle(css.on)
        icon_arrow_down.classList.toggle(css.up)
        options.addEventListener('click', (e) => optionsHandler(e) )

        options.innerHTML = ''
        
        package.versions.all.map( 
            ver => (ver === el.textContent) ? 
            options.append(bel`<li class="${css.option} ${css["current-version"]}">${icon_checked}${ver}</li>` )
            : options.append( bel`<li class=${css.option}>${ver}</li>`)
        )
    }

    function optionsHandler(e) {
        e.stopPropagation()
        let newList =  package.versions.all.map( ver => {
            if (ver === e.target.textContent) {
                // update vers from init package
                vers = ver
                // udpate display version after select
                displayVersion.innerHTML = ver
                return bel`<li class="${css.option} ${css["current-version"]}">${icon_checked}${ver}</li>` 
            }
            return bel`<li class=${css.option}>${ver}</li>`
        })

        options.innerHTML = ''
        newList.map( item => options.append(item) )
        icon_arrow_down.classList.remove(css.up)
        options.classList.remove(css.on) 
    }

    // install init goes here
    async function installHandler(event, el) {
        event.stopPropagation()

        let obj = Object.assign({}, package)
        obj.status.app.install = true;
        obj.status.app.version = vers
        obj.status.app.data = await fetch(`${package.link}/dist/${vers}/version.json`).then( res => res.json() )
        
        console.log(`${title} v${vers} is installed`);

        selectVersion.remove()
        introHeader.append( actions({styl, title, ver: vers, selector: selectVersion, url, package}, clearVers, protocol) )
        
        return protocol({update: obj})
    }

    // clear select version via remove action
    function clearVers(latest, removeVersion) {
        vers = latest
        displayVersion.innerText = latest
        return protocol({remove: removeVersion})
    }

    // switch page
    function pageHandler(i) {
        console.log(`[navigate] ${i}`)
        // clear content to add new contnet
        content.innerHTML = ''
        if ( i === 'package') getInfo(package.about.info, i, loadPage)
        else if (i === 'chat' ) content.innerHTML = '<iframe src="https://discord.com/widget?id=986752391917482035&theme=light" width="350" height="500" allowtransparency="true" frameborder="0" sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>'
        else if (i === 'supplyTree') content.append( SupplyTree(vers, package, protocol) )
        else getInfo(package[i], i, loadPage)
    }


    // fetch page's content
    async function getInfo(file, page, done) {
        try {
            if (page === 'package') {

                var result = {
                    intro: await fetch(`${url}/${file}`).then(res => res.text()),
                    maintainer: await fetch(`${url}/${package.about.maintainer}`).then(res => res.json())
                }

            } else if (page === "doc" ) {

                if (vers === package.versions.latest) {
                    
                    if ( package.doc.includes('http') ) {
                        var result = await fetch(package.doc).then(res => res.text())
                        // var data = `${url}/dist/${vers}/blob/v${vers}.md`
                        // var result = await fetch(data).then(res => res.text())
                    } else {
                        var data = `${url}/dist/${vers}/blob/v${vers}.md`
                        var result = await fetch(data).then(res => res.text())
                    }
                       
                } else {
                    data = `${url}/dist/${vers}/blob/v${vers}.md`
                    var result = await fetch(data).then(res => res.text())
                }

                
            } else if (page === "supplyTree") {
                var result = await fetch(`${path}/${file}`)
            } else {
                var result = await fetch(`${url}/${file}`).then(res => res.text())
            }
            
            return done(null, page, result)

        } catch (error) {
            done(error)
        }
    }

    function loadPage(err, page, data) {
        const currentWindow = document.querySelector(`.app_${title}`)
        const content = currentWindow.querySelector(`.${css.content}`)
        let article = bel`<article class=${css['app-info']}></article>`
        if (err) return console.log(err)

        // page content start
        if (page === 'package') {
            const { intro, maintainer } = data
            // var result = md.render(intro)

            mdConvert(intro, markdown)
            
            // info 
            const info = bel`
            <div class=${css["intro-info"]}>
                ${img}
                <div class=${css["intro-content"]}>
                    <h4 class=${css["intro-title"]}>${package.title}</h4>
                    <a class=${css.link} href="${maintainer.url}" target="_blank">${maintainer.name}</a>
                </div>
            </div>`

            const title = bel`<h1 class=${css["package-title"]}>About</h1>`
            introHeader.innerHTML = ''
            
            introHeader.append(info)

            package.status.app.install 
            // if page is not installed, show default action button
            ? introHeader.append( buttons )
            // if package is installed, show action buttons(launch, shortcut, settings, remove...etc)
            : introHeader.append( selectVersion )

            article.append(introHeader, title, markdown)

        } else if ( page === "doc") {
            const hljsStyle = bel `<link href="./src/node_modules/assets/css/hljs.css" rel='stylesheet' type='text/css'>`
            document.head.appendChild(hljsStyle)

            let docs = bel`<section class="${css.docs}"></section>`
            var aside = bel`<aside class=${css.toc}></aside>`
            var list = bel`<nav class=${css.list}></nav>`

            // markdown file convert
            mdConvert(data, markdown)
            
            // make toc list from markdown
            mdTocConvert(data, list)
            aside.append(list)
            docs.append(aside, markdown)
            article.append(docs)

            // first get toc all ul elements
            let lists = [...list.querySelectorAll('ul')]

            // add class to all ul elements
            lists.map( ul =>  { 
                ul.classList.add(css["toc-collapse"]) 
                let li = [...ul.children]
                li.forEach( (el, i, arr) => collapaseHandler(el, i, arr) )
            } )
            
            function collapaseHandler(el, i, arr) {
                let items = [...el.children]
                items.map( item => {
                    if (item.tageName === 'a') return
                })

                el.addEventListener('click', (e) => {
                    // remove all active
                    removeClass(arr, css.active)

                    // find nextElementSibling and remove active status
                    if (e.target.parentNode.nextElementSibling) {
                        let currentToc = [...e.target.parentNode.nextElementSibling.children]
                        currentToc.map( tocList => tocList.classList.remove(css.active) )
                    }
                    
                    // add active status
                    addClass(el, css.active)
                })
            }

            function removeClass(arr, klass) {
                arr.forEach( i => { 
                    i.classList.remove(klass)
                })
            }

            function addClass(el, klass) {
                el.classList.add(klass)
            }

        } else {
            mdConvert(data, markdown)
            article.append(markdown)   
        }
        
        content.innerHTML = ''
        content.appendChild(article)


    }

}


const style = csjs `
.container {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 150px auto;
    height: 100%;
}
/* App info */
.content {
    height: 100%;
    overflow: hidden;
    overflow-y: auto;
}
.app-info {
    position: relative;
    padding: 0 20px;
}
.package-title {
    font-size: 2.8rem;
}
.content table {
    display: block;
    width: 100%;
    overflow: auto;
}

.content tr {
    background-color: #fff;
    border-top: 1px solid #c6cbd1;
}

.content table td,
.content table th {
    padding: 6px 13px;
    border: 1px solid #dfe2e5;
}
.content table tr:nth-child(2n) {
    background-color: #f6f8fa;
}
.intro-header {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-template-columns: auto auto;
    grid-template-areas: "info selector"
                         "actions actions";
    padding-top: 20px;
}
.intro-info {
    grid-area: info;
    display: grid;
    grid-template: auto / 48px auto;
    grid-gap: 0px 10px;
}
.intro-content {
    grid-row-start: 1;
    grid-column-start: 2;
    padding-top: 5px;
}
.intro-title {
    margin: 0;
    font-weight: normal;
    font-size: var(--appInfoIntroTitleFontSize);
    align-self: center;
}
.intro-logo {

}
.link {
    font-size: var(--appInfoLinkFontSize);
    text-decoration: none;
}
.selector {
    position: relative;
    grid-area: selector;
    justify-self: right;
    align-self: start;
    display: grid;
    grid-template-columns: 100px auto;
    user-select: none;
}
.selected {
    position: relative;
    z-index: 9;
    background-color: #F2F2F2;
    display: flex;
    justify-items: center;
    align-items: center;
    padding: 0 8px;
    border-radius: 0 4px 4px 0;
    user-select: none;
}
.selected .text {
    font-size: 1.4rem;
}
.selected .icon {
    width: 10px;
    margin-left: 5px;
}
.selector .btn {
    display: inline-flex;
    align-items: center;
    outline: none;
    padding: 6px 12px;
    border-radius: 4px 0 0 4px;
    font-size: var(--actionBtnFontSize);
    color: var(--btnColor);
    background-color: var(--btnBgColor);
    transition: color 0.45s, background-color 0.45s ease-in-out;
 }
 .selector .btn svg {
    transition: fill 0.45s ease-in-out;
 }
 .selector .btn:hover {
     color: var(--btnHoverColor);
     background-color: var(--btnHoverBgColor);
 }
 .selector .btn:hover svg {
    fill: white;
}
.down {
    width: 12px;
    margin-left: 5px;
    transition: transform 0.4s ease-in-out;
}
.down.up {
    transform: rotate(-0.5turn);
}
.option {
    padding: 6px 12px;
    text-align: right;
    font-size: 1.4rem;
    cursor: pointer;
    -ms-user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    transition: background-color 0.5s ease-in-out;
}
.option:hover {
    background-color: #BBBBBB;
}
.current-version {
    display: flex;
}
.current-version:hover {
    background-color: transparent;
}
.checked {
    width: 14px;
    margin-right: 5px;
}
.btn .icon {
    width: 20px;
}
.download {
    position: relative;
    z-index: 9;
    height: 35px;
}
.show-version {
    position: absolute;
    right: 0;
    top: 20px;
    min-width: 74px;
    max-height: 0;
    overflow: hidden;
    background-color: #f2f2f2;
    opacity: 0;
    user-select: none;
    list-style: none;
    padding: 0;
    margin: 0;
    transition: max-height 0.2s, top 0.6s, opacity 0.6s ease-in-out;
}
.show-version.on {
    top: 38px;
    max-height: 400px;
    overflow: auto;
    opacity: 1;
}
.trigger {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 9;
    width: 100%;
    height: 100%;
}
/* markdown style */
.markdown {
    line-height: 1.5;
}
/* Title defines */
.markdown h1 {
    font-size: 2.8rem;
}
.markdon h2 {
    font-size: 2rem
}
.markdonw h3 {
    font-size: 1.8rem
}
.markdonw h4 {
    font-size: 1.6rem
}
.markdonw h5 {
    font-size: 1.4rem
}
.markdonw h6 {
    font-size: 1.2rem
}
.docs {
    display: grid;
    grid-template-columns: auto 150px;
    grid-gap: 10px;
}
.docs .markdown {
    grid-row: 1;
    grid-column: 1;
}
.toc {
    position: relative;
    grid-row: 1;
    grid-column: 2;
    height: 100%;
}
.toc a {
    text-decoration: none;
}
.toc a:hover {
    text-decoration: underline;
}
.list {
    position: fixed;
    right: 20px;
    top: 35px;
    padding-left: 25px;
    width: 180px;
    height: calc(100% - 40px);
    overflow: hidden;
    overflow-y: auto;
}
.toc-collapse {
    padding: 0;
    margin: 0 0 0 12px;
}
.toc-collapse ul {
    display: none;
}
.toc-collapse li {
    position: relative;
    list-style-type: none;
    font-size: 1.2rem;
    line-height: 1.2;
}
.toc-collapse p {
    margin: 10px 0 10px 0;
}
.toc-collapse .icon {
    position: absolute;
    left: -16px;
    top: 1px;
    width: 12px;
}
.toc-collapse a:hover, .toc-collapse .active > .toc-collapse a:hover,
.toc-collapse .active > .toc-collapse .active > .toc-collapse a:hover,
.toc-collapse .active > .toc-collapse .active .toc-collapse > .active > .toc-collapse a:hover,
.toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse a:hover
{
    color: var(--linkHoverColor);
}

.toc-collapse li > .toc-collapse li > .toc-collapse li > .toc-collapse li a
{
    line-height: 1.8;
}
.toc-collapse a, .toc-collapse a:hover {
    text-decoration: none;
}
.toc-collapse .active a, 
.toc-collapse .active > .toc-collapse .active a,
.toc-collapse .active > .toc-collapse .active > .toc-collapse .active a,
.toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse .active a
{
    font-weight: bold;
    color: #000;
}
.toc-collapse .active > .toc-collapse a,
.toc-collapse .active > .toc-collapse .active > .toc-collapse a,
.toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse a,
.toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse .active > .toc-collapse a
{
    font-weight: normal;
    color: #707070;
}
.toc-collapse .active > .toc-collapse {
    display: block;
}
@media screen and (max-width: 1024px) {
    .content {
        height: calc( 100vh - 29px - 4px);
    }
}
`

module.exports = AppInfo