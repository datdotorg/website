const bel = require('bel')
const csjs = require('csjs-inject')
// widgets
const Graphic = require('Graphic')

function OpenWindow(styl, url, package, content, protocol) {
    const css = style

    let title = package.title.split(' ').join('').toLowerCase()

    // icons
    let close = Graphic('./src/node_modules/assets/svg/close.svg', css.icon)
    let minmax = Graphic('./src/node_modules/assets/svg/minmax.svg', css.icon)
    
    const el = bel`
        <div class="${css.window} app_${title} ${styl}" onclick=${ ()=> windowLevel(el)}>
            <header class=${css["panel-header"]}>
                <span class=${css["panel-title"]}>${package.title}</span>
                <div class=${css["panel-nav"]}>
                    <button class="${css.btn} ${css.minmax}" onclick=${(e) => panelNav(e, "minmax")}>${minmax}</button>
                    <button class="${css.btn} ${css.close}" onclick=${(e) => panelNav(e, "close")}>${close}</button>
                </div>
            </header>
            <div class=${css["panel-body"]}>
                ${content(styl, url, title, package, protocol)}
            </div>
        </div>`

    return protocol({item: el, app: package})

    function panelNav(event, status) {

        if (status === 'close') {
            el.remove()
            package.status.open = false
            let allWindows =  document.body.querySelectorAll("[class^='window']")
            allWindows.forEach( (panel, index, arr) => {
                panel.classList.remove(styl) 

                if ( arr[arr.length - 1] === panel ) {
                    panel.classList.add(styl) 
                }
            })
        }

        if (status === 'minmax') {
            el.classList.toggle(css.fullscreen)
        }
    }

    // set current window's level up to top
    function windowLevel(target) {
        if (target.classList.contains(styl)) return
        target.classList.add(styl)
    }
}


const style = csjs`
    .window {
        position: absolute;
        z-index: 2;
        left: 50%;
        top: 50%;
        width: 960px;
        height: 75vh;
        max-width: 100%;
        max-height: 100%;
        transform: translate(-50%, -50%);
        display: grid;
        grid-template: 29px auto / auto;
    }
    .panel-header {
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: auto 65px;
        border: var(--panelBorder) solid var(--panelBorderColor);
        background-color: var(--panelHeaderBgColor);
        align-items: center;
    }
    .panel-nav {
        display: grid;
        grid-auto-flow: column;
        align-items: center;
    }
    .panel-nav .icon svg {
        width: 20px;
    }
    .panel-title {
        font-size: var(--panelHeaderTitleSize);
        color: var(--panelHeaderTitleColor);
        text-align: center;
    }
    .panel-body {
        background-color: var(--panelBodyBgColor);
        border: var(--panelBorder) solid var(--panelBorderColor);
        border-top: 0;
        height: calc(75vh - 29px);
    }
    .btn {
        padding: 0;
        align-items: center;
        justify-items: center;
    }
    .icon {
        
    }
    .fullscreen {
        width: 100%;
        height: 100%;
    }
    .fullscreen .panel-body {
        height: calc(100vh - 29px);
    }
    .minmax {
    }
    .close {
    }
    @media screen and (max-width: 1024px) {
        .window {
            width: 100vw;
            height: 100vh;
            min-width: 768px;
            left: 0;
            top: 0;
            transform: none;
        }
        .panel-body {
            height: 100%;
        }
    }`

module.exports = OpenWindow